from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
from PIL import Image
import torch
from torchvision import transforms

app = FastAPI()

# Load the model
model = torch.load("model_weights.h5", map_location=torch.device("cpu"))
model.eval()

# Class labels
class_names = ['lung_aca', 'lung_n', 'lung_scc']  # Replace with your actual classes

# Image transformation
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    image = Image.open(file.file).convert("RGB")
    input_tensor = transform(image).unsqueeze(0)
    
    with torch.no_grad():
        output = model(input_tensor)
        predicted_index = torch.argmax(output, dim=1).item()
        predicted_class = class_names[predicted_index]

    return JSONResponse(content={"predicted_class": predicted_class})
